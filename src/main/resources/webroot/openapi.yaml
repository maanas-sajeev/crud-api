openapi: 3.0.3
info:
  title: CRUD API
  description: A RESTful CRUD API built with Vert.x and MongoDB
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8888
    description: Service 1
  - url: http://localhost:8889
    description: Service 2
  - url: http://localhost:8890
    description: Service 3

paths:
  /api/v1/hello:
    get:
      summary: Health check endpoint
      description: Check if the API is running
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "API is up and running!"
                  database:
                    type: string
                    example: "connected"

  /api/v1/resources:
    get:
      summary: Get all resources
      description: Retrieve all resources with optional filtering and pagination
      parameters:
        - name: filter
          in: query
          description: Filter resources (format field:value)
          required: false
          schema:
            type: string
            example: "name:example"
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new resource
      description: Create a new resource in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceInput"
      responses:
        "201":
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/resources/{id}:
    get:
      summary: Store or retrieve ID using AsyncMap clustering
      description: Both services can store/retrieve IDs. Use action parameter to specify operation.
      parameters:
        - name: id
          in: path
          required: true
          description: Any string ID for AsyncMap storage/retrieval
          schema:
            type: string
            example: "test123"
        - name: action
          in: query
          required: false
          description: Action to perform (store or retrieve). Default is retrieve.
          schema:
            type: string
            enum: [store, retrieve]
            default: retrieve
            example: "store"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a resource completely
      description: Replace all fields of a resource
      parameters:
        - name: id
          in: path
          required: true
          description: MongoDB ObjectId of the resource
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceInput"
      responses:
        "200":
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Invalid ID format or bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      summary: Partially update a resource
      description: Update specific fields of a resource
      parameters:
        - name: id
          in: path
          required: true
          description: MongoDB ObjectId of the resource
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the resource
                  example: "Updated Resource Name"
                description:
                  type: string
                  description: Description of the resource
                  example: "Updated description"
                category:
                  type: string
                  description: Category of the resource
                  example: "updated-category"
      responses:
        "200":
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Invalid ID format or bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a resource
      description: Remove a resource from the database
      parameters:
        - name: id
          in: path
          required: true
          description: MongoDB ObjectId of the resource
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
      responses:
        "204":
          description: Resource deleted successfully
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Resource:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          pattern: "^[0-9a-fA-F]{24}$"
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          description: Name of the resource
          example: "Example Resource"
        description:
          type: string
          description: Description of the resource
          example: "This is an example resource"
        category:
          type: string
          description: Category of the resource
          example: "books"
      required:
        - _id
        - name

    ResourceInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the resource
          example: "Example Resource"
        description:
          type: string
          description: Description of the resource
          example: "This is an example resource"
        category:
          type: string
          description: Category of the resource
          example: "books"
      required:
        - name

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Resource not found"
      required:
        - error

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        pagination:
          type: object
          properties:
            page:
              type: integer
              description: Current page number
              example: 1
            limit:
              type: integer
              description: Number of items per page
              example: 10
            total:
              type: integer
              description: Total number of resources
              example: 25
            pages:
              type: integer
              description: Total number of pages
              example: 3
          required:
            - page
            - limit
            - total
            - pages
      required:
        - data
        - pagination
